
var re = /^\w+([\.-]?\w+)*@\w+ ([\.-]?\w+)*(\.\w{2,3})+$/; 

if(re.test(value)){
	//....
}
value是待比较的值。
test()方法返回Boolean值，match()返回数组
正则表达式以斜杠(/)开头和结尾。斜杠之间的所有内容被看做是正则表达式的组成部分。
\w表示任意单一字符，包括a~z,A~Z,0~9或下划线。
加号+表示我们要寻找前面条目的一次或多次出现。
左圆括号(表示一个组。这意味着后面将要引用圆括号中的所有内容，所以将他们放在同一个组中。
方括号[]用来表示可以出现在其中的任意一个字符。在这个示例中方括号内包含字符\.-。我们希望允许用户输入点号或连字符，但是点号对于正则表达式有特殊意义，所以需要在它前面加上反斜杠\，这表示我们指的实际上是点号本身，而不是它的特殊意义。在特殊字符前面使用反斜杠称为
“对字符转义”。因为有方括号，输入的字符串在这个位置可以有一个点号或一个连字符，但是两者不能同时存在。注意，连字符不代表任何特殊字符，所以不用加反斜杠。
问号?表示前面的条目可以不出现或者出现一次。所以，在电子邮件地址的第一部分（在@前面的
部分）中可以有一个点号或一个连字符，也可以没有。
在?后面，再次使用\w+，这表示点号或连字符后面必须有其他一些字符。
右圆括号)表示这个组结束了。在此之后是一个星号，表示前面的条目（在这个示例中，指圆括
号中的所有内容）可以不出现或者出现多次。所以如果 dori 是有效的电子邮件前缀，testing-testing-1-2-3
也是。
@字符仅仅代表它本身，没有任何其他意义，这个字符位于电子邮件地址前缀和域名之间。
再次使用\w+，这表示域名必须以一个或多个 a～z、A～Z、0～9 或下划线字符开头。在此之后同
样是([\.-]?\w+)*，表示电子邮件地址的后缀中允许有点号或连字符。
然后，在一对圆括号中建立另一个组：\.\w{2,3}，表示我们希望找到一个点号，后面跟着一些字
符。在这个示例中，花括号中的数字表示前面的条目（本例中是\w，表示字母、数字或下划线）可以
出现 2 次或 3 次。在这个组的右圆括号后面是一个+，也表示前面的条目（这个组）必须出现一次或
多次。这会匹配.com 或.edu 之类的，也与 ox.ac.uk 匹配。
最后，正则表达式的末尾是一个美元符号$，表示匹配的字符串必须在这里结束。这使脚本能够
拒绝那些开头正确，但是在末尾包含垃圾字符的电子邮件地址。斜杠结束正则表达式。分号和原来一
样结束 JavaScript 语句。

\ 在字面意义和特殊意义之间进行切换。例如\w 表示\w 的特殊意义（见下面的解释）而不是字面值
w，但是\$表示不使用$的特殊意义（见下面的解释）而是使用$字符本身
^ 字符串的开头
$ 字符串的结尾
* 零次或多次
+ 一次或多次
? 零次或一次
. 除换行符外的任何字符
\b 单词边界
\B 非单词边界
\d 0～9 的任何数字（与[0-9]相同）
\D 任何非数字
\f 换页符（form feed）
\n 换行符
\r 回车符
\s 任何一个空白字符（与[ \f\n\r\t\v]相同）
\S 任何一个非空白字符
\t 制表符
\v 垂直制表符
\w 任何字母、数字以及下划线（与[a-zA-Z0-9_]相同）
\W 除数字、字母及下划线外的其他字符
\xnn 十六进制数字 nn 定义的 ASCII 字符
\onn 八进制数字 nn 定义的 ASCII 字符
\cX 控制字符 X
[abcde] 与其中任何字符匹配的字符集
[^abcde] 字符补集，与其中任何字符都不匹配的字符集
 [a-e] 与其中的字符范围匹配的字符集
[\b] 退格字符的字面意义（不同于\b）
{n} 前面的字符正好出现 n 次
{n,} 前面的字符至少出现 n 次
{n,m} 前面的字符出现 n～m 次
() 一个组，可以在后面引用它
x|y x 或 y